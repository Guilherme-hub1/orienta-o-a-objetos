{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNlFHqf+KunudUDSdR0M2FL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#Módulo 8\n","#Orientação a Objetos\n","numero = '123-4'\n","titular = \"João\"\n","saldo = 120.0\n","limite = 1000.0\n","\n","#necessidade de representar mais de uma conta\n","numero1 = '123-4'\n","titular1 = \"João\"\n","saldo1 = 120.0\n","limite1 = 1000.0\n","\n","numero2 = '123-5'\n","titular2 = \"José\"\n","saldo2 = 200.0\n","limite2 = 1000.0\n","\n","conta = {\"numero\": '123-4', \"titular\": \"João\", \"saldo\": 120.0, \"limite\": 1000.0}\n","\n","#acessar os dados de uma conta\n","conta['numero']\n","\n","#criar uma segunda conta\n","conta2 = {\"numero\": '123-5', \"titular\": \"José\", \"saldo\": 200.0, \"limite\": 1000.0}\n","\n","#Podemos isolar esse código em uma função responsável por criar uma conta:\n","def cria_conta():\n","    conta = {\"numero\": '123-4', \"titular\": \"João\", \"saldo\": 120.0, \"limite\": 1000.0}\n","    return conta\n","\n","    #o ideal é receber esse valores como parâmetros da função, e por fim retornamos a conta:\n","def cria_conta(numero, titular, saldo, limite):\n","    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n","    return conta\n","\n","conta1 = cria_conta('123-4', 'João', 120.0, 1000.0)\n","conta2 = cria_conta('123-5', 'José', 200.0, 1000.0)\n","\n","#Funcionalidades\n","def deposita(conta, valor):\n","    conta['saldo'] = conta['saldo'] + valor\n","\n","def deposita(conta, valor):\n","    conta['saldo'] += valor\n","\n","def saca(conta, valor):\n","    conta['saldo'] -= valor\n","\n","def extrato(conta):\n","    print(\"numero: {} \\nsaldo: {}\".format(conta['numero'], conta['saldo']))\n","#O extrato imprime as informações da conta utilizando a função print().\n","\n","#Testar o codigo\n","conta = cria_conta('123-4', 'João', 120.0, 1000.0)\n","deposita(conta, 15.0)\n","extrato(conta)\n","\n","#numero: '123-4'\n","#saldo: 135.0\n","\n","saca(conta, 20.0)\n","extrato(conta)\n","\n","#numero: '123-4'\n","#saldo 115.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iM6H1XL881am","executionInfo":{"status":"ok","timestamp":1748348856666,"user_tz":180,"elapsed":19,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"79cad596-e7f3-4ba7-f9d0-1a19cdb274e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["numero: 123-4 \n","saldo: 135.0\n","numero: 123-4 \n","saldo: 115.0\n"]}]},{"cell_type":"code","source":["#Módulo 8\n","#Orientação a Objetos\n","numero = '123-4'\n","titular = \"João\"\n","saldo = 120.0\n","limite = 1000.0\n","\n","#necessidade de representar mais de uma conta\n","numero1 = '123-4'\n","titular1 = \"João\"\n","saldo1 = 120.0\n","limite1 = 1000.0\n","\n","numero2 = '123-5'\n","titular2 = \"José\"\n","saldo2 = 200.0\n","limite2 = 1000.0\n","\n","conta = {\"numero\": '123-4', \"titular\": \"João\", \"saldo\": 120.0, \"limite\": 1000.0}\n","\n","#acessar os dados de uma conta\n","conta['numero']\n","\n","#criar uma segunda conta\n","conta2 = {\"numero\": '123-5', \"titular\": \"José\", \"saldo\": 200.0, \"limite\": 1000.0}\n","\n","#Podemos isolar esse código em uma função responsável por criar uma conta:\n","def cria_conta():\n","    conta = {\"numero\": '123-4', \"titular\": \"João\", \"saldo\": 120.0, \"limite\": 1000.0}\n","    return conta\n","\n","    #o ideal é receber esse valores como parâmetros da função, e por fim retornamos a conta:\n","def cria_conta(numero, titular, saldo, limite):\n","    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n","    return conta\n","\n","conta1 = cria_conta('123-4', 'João', 120.0, 1000.0)\n","conta2 = cria_conta('123-5', 'José', 200.0, 1000.0)\n","\n","#Funcionalidades\n","def deposita(conta, valor):\n","    conta['saldo'] = conta['saldo'] + valor\n","\n","def deposita(conta, valor):\n","    conta['saldo'] += valor\n","\n","def saca(conta, valor):\n","    conta['saldo'] -= valor\n","\n","def extrato(conta):\n","    print(\"numero: {} \\nsaldo: {}\".format(conta['numero'], conta['saldo']))\n","#O extrato imprime as informações da conta utilizando a função print().\n","\n","#Testar o codigo\n","conta = cria_conta('123-4', 'João', 120.0, 1000.0)\n","deposita(conta, 15.0)\n","extrato(conta)\n","\n","#numero: '123-4'\n","#saldo: 135.0\n","\n","saca(conta, 20.0)\n","extrato(conta)\n","\n","#numero: '123-4'\n","#saldo 115.0\n","\n","#Módulo 9\n","#encapsulamento\n","\n","class Conta:\n","\n","    def __init__(self, numero, titular, saldo, limite=1000.0):\n","        self.numero = numero   # Número da conta\n","        self.titular = titular # Nome do titular\n","        self.saldo = saldo     # Saldo inicial\n","        self.limite = limite   # Limite da conta\n","\n","# outros métodos\n","    def saca(self, valor):\n","        self.saldo -= valor\n","\n","# minha_conta = Conta('123-4', 'João', 1000.0, 2000.0)\n","# minha_conta.saca(500000)\n","\n","#alterar o saldo diretamente:\n","# minha_conta = Conta('123-4', 'João', 1000.0)\n","# minha_conta.saldo = -200\n","\n","#Para evitar isso seria testar se não estamos sacando um valor maior que o saldo toda vez que formos alterá-lo.\n","\n","minha_conta = Conta('123-4', 'joão', 1000.0) # Define minha_conta\n","novo_saldo = -200 # Define novo_saldo\n","\n","if (novo_saldo < 0):\n","    print(\"saldo inválido\")\n","else:\n","    minha_conta.saldo = novo_saldo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aOpBqNUhBIJZ","executionInfo":{"status":"ok","timestamp":1748462671409,"user_tz":180,"elapsed":42,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"b769378e-121d-459a-f93b-4f9de1e8cfcd"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["numero: 123-4 \n","saldo: 135.0\n","numero: 123-4 \n","saldo: 115.0\n","saldo inválido\n"]}]},{"cell_type":"code","source":["#Módulo 10\n","#Pycharm\n","  class Conta:\n","\n","      def __init__(self, numero, titular, saldo, limite=1000.0):\n","         # Construtor que inicializa os atributos da conta\n","          self._numero = numero  # Número da conta (ex: \"123-4\")\n","          self._titular = titular # Nome do titular da conta\n","          self._saldo = saldo # Saldo inicial da conta\n","          self._limite = limite # Limite de crédito da conta\n","\n","\n","# Método para depositar um valor na conta\n","      def deposita(self, valor):\n","          self._saldo += valor\n","\n","      def exibe_dados(self):\n","          print(f\"Número: {self._numero}\")\n","          print(f\"Titular: {self._titular}\")\n","          print(f\"Saldo: {self._saldo}\")\n","          print(f\"Limite: {self._limite}\")\n","\n","# Bloco principal para testes — executado apenas se o script for rodado diretamente\n","  if __name__ == '__main__':\n","      conta = Conta('123-4', 'João', 1200.0)\n","      conta.deposita(100.0)\n","      conta.exibe_dados()"],"metadata":{"id":"dVQWXoi6B6nT","executionInfo":{"status":"ok","timestamp":1748349205638,"user_tz":180,"elapsed":9,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"eea8644d-4841-44ed-9319-308ce3c3c568"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Número: 123-4\n","Titular: João\n","Saldo: 1300.0\n","Limite: 1000.0\n"]}]},{"cell_type":"code","source":["#Módulo 11\n","#Herança e classe\n","class Funcionario:\n","\n","    def __init__(self, nome, cpf, salario):\n","        self._nome = nome # Nome do funcionário\n","        self._cpf = cpf # CPF do funcionário\n","        self._salario = salario # Salário base do funcionário\n","\n","    def get_bonificacao(self):\n","      # Calcula a bonificação como 10% do salário\n","        return self._salario * 0.10\n","\n","    def __str__(self):\n","       # Representação em string para imprimir informações básicas\n","        return f'Funcionario: {self._nome}, CPF: {self._cpf}, Salário: {self._salario}'\n","\n","\n","# Classe derivada Gerente\n","class Gerente(Funcionario):\n","\n","    def __init__(self, nome, cpf, salario, senha, qtd_gerenciaveis):\n","        super().__init__(nome, cpf, salario) # Inicializa atributos da classe pai\n","        self._senha = senha  # Senha de acesso do gerente\n","        self._qtd_gerenciaveis = qtd_gerenciaveis # Quantidade de funcionários gerenciáveis\n","\n","    def autentica(self, senha):\n","      # Verifica se a senha fornecida confere com a senha do gerente\n","        if self._senha == senha:\n","            print(\"Acesso permitido\")\n","            return True\n","        else:\n","            print(\"Acesso negado\")\n","            return False\n","\n","    def get_bonificacao(self):\n","      # Bonificação do gerente = bonificação padrão + bônus fixo de 1000\n","        return super().get_bonificacao() + 1000.0\n","\n","    def __str__(self):\n","       # Representação em string incluindo informações específicas do gerente\n","        return f'Gerente: {self._nome}, CPF: {self._cpf}, Salário: {self._salario}, Gerencia: {self._qtd_gerenciaveis}'\n","\n","\n","# Classe genérica para testes de __str__ e __repr__\n","class MinhaClasse:\n","    def __str__(self):\n","        # Mostra nome da classe e endereço de memória da instância\n","        return f'<Instância de {self.__class__.__name__}; endereço: {hex(id(self))}>'\n","\n","\n","# Testes\n","if __name__ == '__main__':\n","    funcionario = Funcionario('João', '111111111-11', 2000.0)\n","    print(funcionario) # Imprime dados via __str__\n","    print(\"Bonificação do funcionário:\", funcionario.get_bonificacao())\n","    print(vars(funcionario))  # Mostra dicionário interno de atributos\n","\n","\n","    gerente = Gerente('José', '222222222-22', 5000.0, '1234', 3)\n","    print(gerente)  # Imprime dados do gerente\n","    print(\"Bonificação do gerente:\", gerente.get_bonificacao())\n","    print(\"Autenticação com senha correta:\", gerente.autentica('1234'))\n","    print(\"Autenticação com senha incorreta:\", gerente.autentica('0000'))\n","    print(vars(gerente))   # Mostra atributos internos\n","\n","    mc = MinhaClasse()\n","    # Testando MinhaClasse\n","    print(mc)\n","    print(repr(mc))  # Usa __repr__ padrão, mostra detalhe de classe"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GEvxicpfvK_U","executionInfo":{"status":"ok","timestamp":1748349789441,"user_tz":180,"elapsed":32,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"a8342e10-cf0d-416f-d35d-64a2013af8e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Funcionario: João, CPF: 111111111-11, Salário: 2000.0\n","Bonificação do funcionário: 200.0\n","{'_nome': 'João', '_cpf': '111111111-11', '_salario': 2000.0}\n","Gerente: José, CPF: 222222222-22, Salário: 5000.0, Gerencia: 3\n","Bonificação do gerente: 1500.0\n","Acesso permitido\n","Autenticação com senha correta: True\n","Acesso negado\n","Autenticação com senha incorreta: False\n","{'_nome': 'José', '_cpf': '222222222-22', '_salario': 5000.0, '_senha': '1234', '_qtd_gerenciaveis': 3}\n","<Instância de MinhaClasse; endereço: 0x7c105dce5390>\n","<__main__.MinhaClasse object at 0x7c105dce5390>\n"]}]},{"cell_type":"code","source":["#Módulo 12\n","#Herança multipla e interfaces\n","\n","# Classe base\n","class Funcionario:\n","    def __init__(self, nome, cpf, salario):\n","        self._nome = nome\n","        self._cpf = cpf\n","        self._salario = salario\n","\n","\n","# MixIn de autenticação\n","class AutenticavelMixIn:\n","    def __init__(self, senha):\n","        self._senha = senha  # Armazena a senha para autenticação\n","\n","    def autentica(self, senha):\n","        if self._senha == senha:\n","            print(f\"Acesso permitido para {self.__class__.__name__}\")\n","            return True\n","        else:\n","            print(f\"Acesso negado para {self.__class__.__name__}\")\n","            return False\n","\n","\n","# MixIn de atendimento\n","class AtendimentoMixIn:\n","    def cadastra_atendimento(self):\n","      # Simula o cadastro de um atendimento\n","        print(f\"{self.__class__.__name__}: Atendimento cadastrado com sucesso.\")\n","\n","    def atende_cliente(self):\n","      # Simula o atendimento de um cliente\n","        print(f\"{self.__class__.__name__}: Cliente atendido com sucesso.\")\n","\n","\n","# MixIn de hora extra\n","class HoraExtraMixIn:\n","    def calcula_hora_extra(self, horas):\n","        valor = horas * 50  # Suponha R$50 por hora\n","        print(f\"{self.__class__.__name__}: Hora extra calculada: R${valor:.2f}\")\n","        return valor\n","\n","\n","# Classes especializadas\n","class Gerente(Funcionario, AutenticavelMixIn, HoraExtraMixIn):\n","    def __init__(self, nome, cpf, salario, senha):\n","      # Inicializa as classes base\n","        Funcionario.__init__(self, nome, cpf, salario)\n","        AutenticavelMixIn.__init__(self, senha)\n","\n","\n","# Classe Diretor: herda de Funcionario e AutenticavelMixIn\n","class Diretor(Funcionario, AutenticavelMixIn):\n","    def __init__(self, nome, cpf, salario, senha):\n","        Funcionario.__init__(self, nome, cpf, salario)\n","        AutenticavelMixIn.__init__(self, senha)\n","\n","# Classe Cliente: herda apenas de AutenticavelMixIn\n","class Cliente(AutenticavelMixIn):\n","    def __init__(self, nome, cpf, senha):\n","        self._nome = nome\n","        self._cpf = cpf\n","        super().__init__(senha)\n","\n","# Classe Escriturario: herda de Funcionario e AtendimentoMixIn\n","class Escriturario(Funcionario, AtendimentoMixIn):\n","    def __init__(self, nome, cpf, salario):\n","        super().__init__(nome, cpf, salario)\n","\n","\n","# Sistema de login\n","class SistemaInterno:\n","    def login(self, obj, senha):\n","        if hasattr(obj, 'autentica'):\n","            return obj.autentica(senha)\n","        else:\n","            print(f'{obj.__class__.__name__} não é autenticável')\n","            return False\n","\n","\n","# Testes\n","if __name__ == '__main__':\n","    gerente = Gerente('José', '222222222-22', 5000.0, '1234')\n","    diretor = Diretor('João', '111111111-11', 7000.0, 'abcd')\n","    cliente = Cliente('Maria', '333333333-33', '9999')\n","    escriturario = Escriturario('Ana', '444444444-44', 2500.0)\n","\n","    sistema = SistemaInterno()\n"," # Testa o login de diferentes perfis\n","    sistema.login(gerente, '1234')     # Acesso permitido\n","    sistema.login(diretor, 'errada')   # Acesso negado\n","    sistema.login(cliente, '9999')     # Acesso permitido\n","    sistema.login(escriturario, '123') # Não é autenticável\n","\n"," # Testa funcionalidades específicas\n","    gerente.calcula_hora_extra(4)      # Calcula hora extra\n","    escriturario.atende_cliente()      # Atende cliente\n","    escriturario.cadastra_atendimento()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l8tB6o4vvPsy","executionInfo":{"status":"ok","timestamp":1748350379504,"user_tz":180,"elapsed":42,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"0b082203-3b9e-411e-9d0a-e1d95341960c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acesso permitido para Gerente\n","Acesso negado para Diretor\n","Acesso permitido para Cliente\n","Escriturario não é autenticável\n","Gerente: Hora extra calculada: R$200.00\n","Escriturario: Cliente atendido com sucesso.\n","Escriturario: Atendimento cadastrado com sucesso.\n"]}]},{"cell_type":"code","source":["#Módulo 13\n","#excecoes-e-erros.md\n","\n","class Conta:\n","    def __init__(self, numero, titular, saldo=0.0, limite=1000.0):\n","      # Inicializa os atributos da conta\n","        self.numero = numero\n","        self.titular = titular\n","        self.saldo = saldo\n","        self.limite = limite\n","\n","    def deposita(self, valor):\n","      # Adiciona um valor ao saldo da conta\n","        self.saldo += valor\n","\n","    def saca(self, valor):\n","     # Realiza um saque, verificando se está dentro do saldo + limite\n","        if valor > self.saldo + self.limite:\n","            print(\"Não posso sacar fora do limite\")\n","            return False # Indica que o saque não foi realizado\n","        else:\n","            self.saldo -= valor\n","            return True # Saque realizado com sucesso\n","#teste\n","\n","# Criação de uma conta com número e titular (saldo e limite usam os valores padrão)\n","conta = Conta(\"123-4\", \"João\")\n","conta.deposita(100.0) # Depósito de R$100,00 na conta\n","conta.limite = 100.0 # Redefine o limite da conta para R$100,00\n","\n","\n","# Tenta sacar R$3000,00 (excede saldo + limite)\n","if not conta.saca(3000.0):\n","    print(\"não saquei\")  # Se o saque não foi realizado, imprime mensagem"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MeVUZHVQzgyb","executionInfo":{"status":"ok","timestamp":1748350712308,"user_tz":180,"elapsed":8,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"277417b4-1116-40f4-f634-1cb1a56559a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Não posso sacar fora do limite\n","não saquei\n"]}]},{"cell_type":"code","source":["#módulo 14\n","#-collections.md\n","\n","from collections import UserDict\n","\n","# Classe que herda diretamente de UserDict, sem nenhuma modificação adicional\n","class MeuDicionario(UserDict):\n","    pass\n","\n","# Classe Pins que herda de UserDict e modifica o comportamento de alguns métodos\n","class Pins(UserDict):\n","\n","    def __contains__(self, key):\n","        # Verifica se a chave (convertida para string) está presente\n","        return str(key) in self.keys()\n","\n","    def __setitem__(self, key, value):\n","        # Sempre armazena a chave como string\n","        self.data[str(key)] = value\n","\n","\n","# Bloco principal de execução\n","if __name__ == '__main__':\n","  # Cria uma instância de Pins com uma chave inicial 'one'\n","    pins = Pins(one=1)\n","    print(\"Dicionário inicial:\", pins)\n","\n","    pins[3] = 1  # chave será convertida para '3'\n","    print(\"Após adicionar pins[3]:\", pins)\n","\n","\n"," # Tenta usar uma lista como chave, o que causará erro\n","    # porque listas não são hashable (não podem ser usadas como chave de dicionário)\n","    lista = [1, 2, 3]\n","    try:\n","        pins[lista] = 2  # vai dar erro: listas não podem ser convertidas em strings para uso como chave\n","    except TypeError as e:\n","        print(\"Erro ao usar lista como chave:\", e)\n","\n"," # Mostra o dicionário final após as operações\n","    print(\"Dicionário final:\", pins)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YPodbwJy0sp2","executionInfo":{"status":"ok","timestamp":1748350874883,"user_tz":180,"elapsed":65,"user":{"displayName":"Guilhermy","userId":"15623783924404926295"}},"outputId":"8f50bc2c-e47e-47c3-be43-1c277c4d8f3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dicionário inicial: {'one': 1}\n","Após adicionar pins[3]: {'one': 1, '3': 1}\n","Dicionário final: {'one': 1, '3': 1, '[1, 2, 3]': 2}\n"]}]}]}